{"version":3,"sources":["components/PersonForm.js","components/Persons.js","components/Filter.js","services/person.js","components/Notification.js","App.js","index.js"],"names":["PersonForm","addNewName","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Person","name","number","id","removePerson","onClick","Filter","filter","handleFilterChange","personal_label","baseURL","person","axios","post","then","response","data","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","errorMessage","setErrorMessage","useEffect","get","console","log","_id","catch","error","personToRemove","find","window","confirm","arrayWithRemovedPersons","delete","setTimeout","filteredPersons","toLowerCase","includes","event","target","map","preventDefault","personServices","newPerson","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2050687.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst PersonForm = ({ \r\n    addNewName, \r\n    newName, \r\n    handleNameChange,\r\n    newNumber, \r\n    handleNumberChange\r\n}) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={addNewName}>\r\n                <div>\r\n                <label>\r\n                    name: <input value={newName} onChange={handleNameChange} />\r\n                </label>\r\n                </div>\r\n                <div>\r\n                <label>\r\n                    number: <input value={newNumber} onChange={handleNumberChange} />\r\n                </label>\r\n                </div>\r\n                <button type=\"submit\">add new name</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonForm;","import React from 'react';\r\n\r\nconst Person = ({ name, number, id, removePerson }) => {\r\n    return (\r\n        <div>\r\n            <p>{name} {number} <button onClick={() => removePerson(id)}>delete</button></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Person;","import React from 'react';\r\n\r\nconst Filter = ({ filter, handleFilterChange, personal_label }) => {\r\n    return (\r\n        <div>\r\n            <label>\r\n            {personal_label}: <input value={filter} onChange={handleFilterChange} />\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter;","import axios from 'axios';\r\n\r\n// url for the server with all the persons data\r\nconst /** string */ baseURL = '/api/persons';\r\n\r\n/**\r\n * Adds a person and associated number to the db\r\n * \r\n * @param {person} A person with associated number being added to the db\r\n * @returns {Promise} person data\r\n */\r\nconst createPerson = (person) => {\r\n    const request = axios.post(baseURL, person);\r\n    return request.then(response => response.data);\r\n}\r\n\r\n/**\r\n * Updates a person in the db according to their id\r\n * \r\n * @param {person} A person with associated id in the db\r\n * @returns {Promise} updated persons data\r\n */\r\nconst updatePerson = (person) => {\r\n    const request = axios.put(`${baseURL}/${person.id}`, person);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nexport default { createPerson, updatePerson };","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport PersonForm from './components/PersonForm.js';\r\nimport Person from './components/Persons.js';\r\nimport Filter from './components/Filter.js';\r\nimport personServices from './services/person.js';\r\nimport Notification from './components/Notification.js';\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons ] = useState([]);\r\n  const [ newName, setNewName ] = useState('');\r\n  const [ newNumber, setNewNumber ] = useState('');\r\n  const [ filter, setFilter ] = useState('');\r\n  const [ errorMessage, setErrorMessage ] = useState(null);\r\n\r\n  // 2.11: set the initial state of the application with useEffect and axios\r\n  useEffect(() => {\r\n    // grab persons\r\n    axios\r\n      .get('/api/persons')\r\n      .then(response => {\r\n        console.log('persons response successful');\r\n        console.log(response.data[0]._id)\r\n        setPersons(response.data);\r\n      }).catch(error => {\r\n        console.log('error with fetching persons data in App.js:25')\r\n        console.log(error);\r\n      });\r\n\r\n      \r\n  }, []);\r\n\r\n  /** 3.20 */\r\n  const addNewName = (event) => {\r\n    event.preventDefault();\r\n\r\n    const person = {\r\n      name: newName,\r\n      number: newNumber\r\n    };\r\n\r\n    personServices\r\n      .createPerson(person)\r\n      .then(newPerson => {\r\n        setPersons(persons.concat(newPerson));\r\n        setErrorMessage(`${person.name} ${person.number} has been added`);\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000);\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(error.response.data.error);\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000);\r\n      });\r\n\r\n    setNewName('');\r\n    setNewNumber('');\r\n  }\r\n\r\n  // // 2.6: allow the user to add a name to persons\r\n  // const addNewName = (event) => {\r\n  //   event.preventDefault();\r\n\r\n  //   // 2.7: prevent the user from adding duplicate names to persons \r\n  //   // if this is [], then there is no duplicate names, but if it is [<data>]\r\n  //   // then the name being added is a duplicate\r\n  //   const isDuplicateName = persons.find(name => name.name.toLowerCase() === newName.toLowerCase()) || 'no duplicates';\r\n  //   console.log('isDuplicateName:', isDuplicateName)\r\n  //   if ( isDuplicateName === 'no duplicates' ) {\r\n  //     // object of the new person being added to the db\r\n  //     const person = {\r\n  //       name: newName,\r\n  //       number: newNumber\r\n  //     };\r\n\r\n  //     // call f(x) to add person/number to db\r\n  //     personServices\r\n  //       .createPerson(person)\r\n  //       .then(newPerson => {\r\n  //         setPersons(persons.concat(newPerson));\r\n  //         setErrorMessage(`${person.name} ${person.number} has been added`);\r\n  //         setTimeout(() => {\r\n  //           setErrorMessage(null)\r\n  //         }, 5000);\r\n  //       })\r\n  //       .catch(error => console.log(error));\r\n      \r\n  //     setNewName('');\r\n  //     setNewNumber('');\r\n  //   } else {\r\n  //     // the name is a duplicate, so prompt the user to \r\n  //     // verify changing the number is what they want to do\r\n  //     const result = window.confirm(`${newName} is already added to the phonebook, replace the old number with ${newNumber}?`);\r\n      \r\n  //     if (result) {\r\n  //       personServices\r\n  //         .updatePerson({...isDuplicateName, number: newNumber})\r\n  //         .then(response => {\r\n  //           console.log('updated person:', response);\r\n  //           setPersons(persons.map(person => {\r\n  //             return person.name.toLowerCase() !== newName.toLowerCase() ? person : response\r\n  //           }))\r\n  //          })\r\n  //          .catch(error => console.log(error));\r\n  //     }\r\n\r\n  //     setNewName('');\r\n  //     setNewNumber('');\r\n  //   }\r\n  // };\r\n\r\n\r\n  // 2.6: allow the user to add a name\r\n  /**\r\n   * Handle input text changes for add a name by user and set the\r\n   * correct state\r\n   *\r\n   * @param {Object} event The data input by the user\r\n   */\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value);\r\n  };\r\n\r\n  // 2.8: adding phone numbers to a person\r\n  /**\r\n   * Handle input text changes for add a number by user and set the\r\n   * correct state\r\n   *\r\n   * @param {Object} event The data input by the user\r\n   */\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value);\r\n  };\r\n\r\n  // 2.9: allow the user to search for names in persons\r\n  /**\r\n   * Handle input text changes for search for a name by user and set the\r\n   * correct state\r\n   *\r\n   * @param {Object} event The data input by the user\r\n   */\r\n  const handleFilterChange = (event) => {\r\n    setFilter(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * 2.17: Handles the deletion of a person by using their id\r\n   *\r\n   * @param {Number} the id of the person to be deleted\r\n   */\r\n  const removePerson = (id) => {\r\n    // find the person who's id matches the id in persons state\r\n    const /** Object */ personToRemove = persons.find(person => person._id === id);\r\n\r\n    // true if clicked 'ok', false if clicked 'cancel'\r\n    const /** Bool */ result = window.confirm(`Do you want to remove '${personToRemove.name}'?`);\r\n\r\n    if( result ) {\r\n      // filtered array without the person's who has the id of the @param {id}\r\n      const /** Array */ arrayWithRemovedPersons = persons.filter(person => person._id !== id);\r\n\r\n      // delete a person with ${id} from the db\r\n      axios.delete(`api/persons/${id}`)\r\n        .catch(error => {\r\n          console.log(error);\r\n          setErrorMessage(`${personToRemove.name} ${personToRemove.number} has been deleted`);\r\n          setTimeout(() => {\r\n            setErrorMessage(null)\r\n          }, 5000);\r\n        });\r\n      \r\n      setPersons(arrayWithRemovedPersons);\r\n    }\r\n  }\r\n  \r\n  const filteredPersons = filter ? persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase())) : [];\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      {/* 2.9: allow the user to search for a name in persons */}\r\n      <Filter\r\n        filter={filter}\r\n        handleFilterChange={handleFilterChange}\r\n        personal_label={'Enter a name to search'}\r\n      />\r\n      {/* https://www.reddit.com/r/reactjs/comments/gjr1rq/usestate_filtering_names_always_one_step_behind/ */}\r\n      {/* https://stackoverflow.com/questions/55600870/hooks-setstate-always-one-step-behind */}\r\n      {/* search: 'why is my state 1 step behind reactjs' */}\r\n      {/* show persons filtered */}\r\n      {filteredPersons.map(person => (\r\n        <Person name={person.name} number={person.number} />\r\n      ))}\r\n      {/* 2.6: adding names to the phonebook with a form */}\r\n      <h1>Add a New</h1>\r\n      <Notification message={errorMessage} />\r\n      <PersonForm\r\n        addNewName={addNewName}\r\n        newName={newName}\r\n        handleNameChange={handleNameChange}\r\n        newNumber={newNumber}\r\n        handleNumberChange={handleNumberChange}\r\n      />\r\n      <h1>Numbers</h1>\r\n      {/* show all persons not filtered */}\r\n      {persons.map(person => (\r\n        <Person name={person.name} number={person.number} removePerson={removePerson} id={person._id} />\r\n      ))}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}