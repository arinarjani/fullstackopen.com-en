{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseURL","axios","get","then","response","data","newObject","post","id","put","console","log","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteServices","initalNotes","catch","error","length","notesToShow","filter","map","find","changedNote","returnedNote","n","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"6LAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,mCACE,+BAAKH,EAAKI,QAAV,IAAmB,wBAAQC,QAASJ,EAAjB,SAAoCC,U,gBCNvDI,EAAU,aAqCD,EA9BA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SA4B9B,EAnBA,SAACC,GAEZ,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAiB9B,EARA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAEhB,OADAM,QAAQC,IAAI,kBAAkBP,GACvBA,EAASC,SC2FTO,EAxHH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAAS,IAFlB,mBAEdG,EAFc,KAELC,EAFK,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,KAmBrBC,qBAXa,WACXX,QAAQC,IAAI,UACZW,IAEGnB,MAAK,SAAAoB,GACJb,QAAQC,IAAI,qBACZK,EAASO,MAEVC,OAAM,SAAAC,GAAK,OAAIf,QAAQC,IAAIc,QAGhB,IAEhBf,QAAQC,IAAI,SAAUI,EAAMW,OAAQ,SAQpC,IA2DMC,EAAcR,EAClBJ,EACAA,EAAMa,QAAO,SAAAlC,GAAI,OAAIA,EAAKG,aAE5B,OACE,gCACE,uCACA,8BACE,yBAAQE,QAAS,kBAAMqB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGQ,EAAYE,KAAI,SAAAnC,GAAI,OACjB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAzCJ,SAACa,GACzBE,QAAQC,IAAI,UAAWH,GAEvB,IAAMd,EAAOqB,EAAMe,MAAK,SAAApC,GAAI,OAAIA,EAAKc,KAAOA,KAEtCuB,EAAW,2BAAOrC,GAAP,IAAaG,WAAYH,EAAKG,YAE/CyB,EACUd,EAAIuB,GACX5B,MAAK,SAAA6B,GACJhB,EAASD,EAAMc,KAAI,SAAAnC,GACjB,OAAOA,EAAKc,KAAOA,EAAKd,EAAOsC,SAGlCR,OAAM,SAAAC,GACLf,QAAQC,IAAR,UAAejB,EAAKI,QAApB,yCACAkB,EAASD,EAAMa,QAAO,SAAAK,GAAC,OAAIA,EAAEzB,KAAOA,SAyBN0B,CAAmBxC,EAAKc,MAF3Cd,EAAKc,SAMlB,uBAAM2B,SAhFM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBxC,QAASmB,EACTsB,MAAM,IAAIC,MAAOC,cACjB5C,UAAW6C,KAAKC,SAAW,IAG7BrB,EACUgB,GACPnC,MAAK,SAAA6B,GACJtB,QAAQC,IAAI,oBAAqBqB,GACjChB,EAASD,EAAM6B,OAAOZ,IACtBd,EAAW,OAEZM,OAAM,SAAAC,GACLf,QAAQC,IAAIc,OAgEd,UACE,uBACEoB,MAAO5B,EACP6B,SA1DiB,SAACV,GACxBlB,EAAWkB,EAAMW,OAAOF,UA2DpB,wBAAQG,KAAK,SAAb,yBCnHRC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4d5ec80c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <>\r\n      <li>{note.content} <button onClick={toggleImportance}>{label}</button></li>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios';\r\nconst baseURL = '/api/notes';\r\n\r\n/**\r\n * Gets all the notes from the baseURL\r\n * \r\n * @returns {Promise} all the notes on the server\r\n */\r\nconst getAll = () => {\r\n    const request = axios.get(baseURL);\r\n    return request.then(response => response.data);\r\n};\r\n\r\n/**\r\n * Takes a new note created by the user and updates the \r\n * notes data on baseURL\r\n * \r\n * @returns {Promise} new note created\r\n */\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseURL, newObject);\r\n    return request.then(response => response.data);\r\n};\r\n\r\n/**\r\n * Allows the user to update an individual note's important property\r\n * by making important equal true or false\r\n * \r\n * @returns {Promise} new note updated\r\n */\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseURL}/${id}`, newObject);\r\n    return request.then(response => {\r\n        console.log('update response',response); \r\n        return response.data;\r\n    });\r\n};\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react';\r\nimport Note from './components/Note.js';\r\nimport noteServices from './services/notes.js';\r\n\r\n\r\nconst App = (props) => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(false)\r\n\r\n  /**\r\n   * Gets all the notes from the server: http://localhost:3001/notes\r\n   */\r\n  const hook = () => {\r\n    console.log('effect');\r\n    noteServices\r\n      .getAll()\r\n      .then(initalNotes => {\r\n        console.log('promise fulfilled');\r\n        setNotes(initalNotes);\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n  \r\n  useEffect(hook, [])\r\n\r\n  console.log('render', notes.length, 'notes');\r\n\r\n  /**\r\n   * Takes the new note added by the user and updates both the server\r\n   * and the state with that new note\r\n   * \r\n   * @param {Object} event The event object created by user input\r\n   */\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n    };\r\n\r\n    noteServices\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        console.log('note added to db:', returnedNote);\r\n        setNotes(notes.concat(returnedNote));\r\n        setNewNote('');\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Updates newNote state with user input of a new note\r\n   * \r\n   * @param {Object} event The event object created by user input\r\n   */\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  /**\r\n   * Toggles between true/false for each note based on if the user clicks\r\n   * the toggle button\r\n   * \r\n   * @param {Number} id The event object created by user input\r\n   */\r\n  const toggleImportanceOf =(id) => {\r\n    console.log('note id', id)\r\n    // grab the note with the id of id\r\n    const note = notes.find(note => note.id === id);\r\n    // https://www.freecodecamp.org/news/javascript-object-destructuring-spread-operator-rest-parameter/#update-properties\r\n    const changedNote = {...note, important: !note.important}\r\n\r\n    noteServices\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => {\r\n          return note.id !== id ? note : returnedNote\r\n        }));\r\n      })\r\n      .catch(error => {\r\n        console.log(`${note.content} was already deleted from the server`);\r\n        setNotes(notes.filter(n => n.id !== id));\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Either shows all notes if showAll is true or shows notes that\r\n   * have their important value to true\r\n   */\r\n  const notesToShow = showAll\r\n  ? notes\r\n  : notes.filter(note => note.important)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all' }\r\n        </button>\r\n      </div>   \r\n      <ul>\r\n        {notesToShow.map(note => \r\n            <Note \r\n              key={note.id} \r\n              note={note} \r\n              toggleImportance={() => toggleImportanceOf(note.id)} \r\n            />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          value={newNote}\r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>  \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}